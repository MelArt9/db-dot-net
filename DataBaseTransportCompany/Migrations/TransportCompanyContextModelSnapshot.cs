// <auto-generated />
using System;
using DataBaseTransportCompany;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBaseTransportCompany.Migrations
{
    [DbContext(typeof(TransportCompanyContext))]
    partial class TransportCompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataBaseTransportCompany.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("categoryId"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("categoryId");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataBaseTransportCompany.Driver", b =>
                {
                    b.Property<int>("driverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("driverId"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("driverLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<DateOnly>("experience")
                        .HasColumnType("date");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("patronymic")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly>("validityPeriodRights")
                        .HasColumnType("date");

                    b.HasKey("driverId");

                    b.HasIndex("driverLicenseNumber", "phone")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DataBaseTransportCompany.DriverCategory", b =>
                {
                    b.Property<int>("driverId")
                        .HasColumnType("integer");

                    b.Property<int>("categoryId")
                        .HasColumnType("integer");

                    b.HasKey("driverId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("DriverCategories");
                });

            modelBuilder.Entity("DataBaseTransportCompany.ModelTransport", b =>
                {
                    b.Property<int>("modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("modelId"));

                    b.Property<int>("stampId")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("modelId");

                    b.HasIndex("stampId");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("Models");
                });

            modelBuilder.Entity("DataBaseTransportCompany.StampTransport", b =>
                {
                    b.Property<int>("stampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("stampId"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("stampId");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("Stamps");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TransportVehicle", b =>
                {
                    b.Property<int>("transportVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("transportVehicleId"));

                    b.Property<int>("codeRegion")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("dateLastInspection")
                        .HasColumnType("date");

                    b.Property<string>("engineNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<int>("maxSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("modelId")
                        .HasColumnType("integer");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("numberSeats")
                        .HasColumnType("integer");

                    b.Property<int?>("numberStandingPlaces")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("releaseDate")
                        .HasColumnType("date");

                    b.Property<int>("typeId")
                        .HasColumnType("integer");

                    b.HasKey("transportVehicleId");

                    b.HasIndex("modelId");

                    b.HasIndex("typeId");

                    b.HasIndex("number", "codeRegion", "engineNumber")
                        .IsUnique();

                    b.ToTable("TransportVehicles");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TransportVehicleDriver", b =>
                {
                    b.Property<int>("transportVehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("driverId")
                        .HasColumnType("integer");

                    b.HasKey("transportVehicleId", "driverId");

                    b.HasIndex("driverId");

                    b.ToTable("TransportVehicleDrivers");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TypeTransport", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("typeId"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("typeId");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("Types");
                });

            modelBuilder.Entity("DataBaseTransportCompany.DriverCategory", b =>
                {
                    b.HasOne("DataBaseTransportCompany.Category", "Categories")
                        .WithMany("DriverCategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBaseTransportCompany.Driver", "Drivers")
                        .WithMany("DriverCategories")
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("DataBaseTransportCompany.ModelTransport", b =>
                {
                    b.HasOne("DataBaseTransportCompany.StampTransport", "Stamps")
                        .WithMany("Models")
                        .HasForeignKey("stampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stamps");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TransportVehicle", b =>
                {
                    b.HasOne("DataBaseTransportCompany.ModelTransport", "Models")
                        .WithMany("TransportVehicles")
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBaseTransportCompany.TypeTransport", "Types")
                        .WithMany("TransportVehicles")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Models");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TransportVehicleDriver", b =>
                {
                    b.HasOne("DataBaseTransportCompany.Driver", "Drivers")
                        .WithMany("TransportVehicleDrivers")
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBaseTransportCompany.TransportVehicle", "TransportVehicles")
                        .WithMany("TransportVehicleDrivers")
                        .HasForeignKey("transportVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("TransportVehicles");
                });

            modelBuilder.Entity("DataBaseTransportCompany.Category", b =>
                {
                    b.Navigation("DriverCategories");
                });

            modelBuilder.Entity("DataBaseTransportCompany.Driver", b =>
                {
                    b.Navigation("DriverCategories");

                    b.Navigation("TransportVehicleDrivers");
                });

            modelBuilder.Entity("DataBaseTransportCompany.ModelTransport", b =>
                {
                    b.Navigation("TransportVehicles");
                });

            modelBuilder.Entity("DataBaseTransportCompany.StampTransport", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TransportVehicle", b =>
                {
                    b.Navigation("TransportVehicleDrivers");
                });

            modelBuilder.Entity("DataBaseTransportCompany.TypeTransport", b =>
                {
                    b.Navigation("TransportVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
